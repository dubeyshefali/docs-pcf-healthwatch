---
title: Healthwatch Components and Resource Requirements
owner: Healthwatch
---

<strong><%= modified_date %></strong>

This topic describes Healthwatch for VMware Tanzu tile components and the resource requirements for the Healthwatch tile.

For information about the metric exporter VMs that the Healthwatch Exporter for VMware Tanzu Application Service for VMs (TAS for VMs) and Healthwatch
Exporter for Tanzu Kubernetes Grid Integrated Edition (TKGI) tiles deploy, see [Healthwatch Metrics](metrics.html).


## <a id='overview'></a> Overview of Healthwatch Components

The main three components of the Healthwatch tile are Prometheus, Grafana, and MySQL.

The Prometheus instance scrapes and stores metrics from the Healthwatch Exporter tiles, allows you to configure alerts with Alertmanager, and sends canary
tests to target URLs with Blackbox Exporter. The Healthwatch tile then exports the collected metrics to dashboards in the Grafana UI, allowing you to
visualize the data with charts and graphs and create customized dashboards for long-term monitoring and troubleshooting. MySQL is used only to store your
Grafana settings and does not store any time series data. The Healthwatch tile also deploys a fourth component, MySQL Proxy, to route client connections to
healthy MySQL nodes.

By default, the Healthwatch tile deploys two Prometheus VMs, one Grafana VM, one MySQL VM, and one MySQL Proxy VM. In the **Resource Config** pane of the
Healthwatch tile, you can scale and assign load balancers to these resources. For information about making your Healthwatch deployment highly available (HA),
see [High Availability](#ha) below.


## <a id='component-vms'></a> Healthwatch Component VMs

The table below explains each Healthwatch tile component and which VM deploys it:

<table>
  <tr>
    <th style="width: 15%">Component</th>
    <th style="width: 15%">VM Name</th>
    <th style="width: 70%">Description</th>
  </tr>
  <tr>
    <td>Prometheus</td>
    <td><code>tsdb</code></td>
    <td>
      <ul>
        <li>Collects metrics related to the functionality of platform- and runtime-level components</li>
        <li>Stores metrics for up to six weeks</li>
        <li>Can write to remote storage in addition to its local time-series database (TSDB)</li>
        <li>Manages and sends alerts through Alertmanager</li>
        <li>Conducts canary tests through the Blackbox Exporter</li>
      </ul>
    </td>
  </tr>
  <tr>
    <td>Grafana</td>
    <td><code>grafana</code></td>
    <td>
      <ul>
        <li>Deploys the Grafana UI</li>
        <li>Authenticates user login credentials</li>
        <li>Organizes metrics data in charts and graphs</li>
      </ul>
    </td>
  </tr>
  <tr>
    <td>MySQL</td>
    <td><code>pxc</code></td>
    <td>Stores the Grafana settings you configure</td>
  </tr>
  <tr>
    <td>MySQL Proxy</td>
    <td><code>pxc-proxy</code></td>
    <td>Routes client connections to healthy MySQL nodes and away from unhealthy MySQL nodes</td>
  </tr>
</table>


## <a id='resource-requirements'></a> Resource Requirements for the Healthwatch Tile

The following table provides the default resource and IP requirements for installing the Healthwatch tile:

<table>
  <tr>
    <th>Resource</th>
    <th>Instances</th>
    <th>CPUs</th>
    <th>RAM</th>
    <th>Ephemeral Disk</th>
    <th>Persistent Disk</th>
  </tr>
  <tr>
    <td>Prometheus</td>
    <td>2</td>
    <td>4</td>
    <td>16&nbsp;GB</td>
    <td>5&nbsp;GB</td>
    <td>512&nbsp;GB</td>
  </tr>
  <tr>
    <td>Grafana</td>
    <td>1*</td>
    <td>1</td>
    <td>4&nbsp;GB</td>
    <td>5&nbsp;GB</td>
    <td>5&nbsp;GB</td>
  </tr>
  <tr>
    <td>MySQL</td>
    <td>1*</td>
    <td>1</td>
    <td>4&nbsp;GB</td>
    <td>5&nbsp;GB</td>
    <td>10&nbsp;GB</td>
  </tr>
  <tr>
    <td>MySQL Proxy</td>
    <td>1*</td>
    <td>1</td>
    <td>4&nbsp;GB</td>
    <td>5&nbsp;GB</td>
    <td>5&nbsp;GB</td>
  </tr>
</table>

You can scale these resources in the **Resource Config** pane of the Healthwatch tile. `*` Grafana, MySQL, and MySQL Proxy resources can be scaled to zero.
For more information, see [Remove Grafana](#remove-grafana) below.

The Healthwatch tile automatically selects the instance type that is best suited for each job. The instance types that Healthwatch selects depend on the
available resources for your deployment.

### <a id='ha'></a> High Availability

To make your Healthwatch deployment HA, you deploy a redundant number of Healthwatch tile component instances. This increases the capacity and availability of
those components, which decreases the chances of downtime.

To make your Healthwatch deployment HA, you scale Healthwatch tile resources in the **Resource Config** pane of the Healthwatch tile. You can scale
Healthwatch tile resources either vertically or horizontally. For more information about vertical and horizontal scaling, see [Vertical and Horizontal
Scaling](https://docs.pivotal.io/application-service/concepts/high-availability.html#vert-and-horiz) in _High Availability in TAS for VMs_ in the TAS for VMs
documentation.

Healthwatch deploys two Prometheus VMs by default. With two VMs in the Prometheus instance, Prometheus and Alertmanager are made HA by default. You can scale
the Prometheus instance vertically, but you should not scale it horizontally.

Healthwatch deploys a single Grafana VM by default. If you need Grafana to be HA, you can scale the Grafana instance horizontally. When making Grafana HA,
VMware recommends scaling your MySQL instance to three VMs and your MySQL Proxy instance to two VMs.

### <a id='remove-grafana'></a> Remove Grafana

If you do not want to use any Grafana instances in your Healthwatch deployment, such as for using Healthwatch with an external Grafana, you can set the number
of Grafana, MySQL, and MySQL Proxy instances for your Healthwatch deployment to `0` in the **Resource Config** pane of the Healthwatch tile. Grafana, MySQL,
and MySQL Proxy should all be scaled to 0 together if Grafana is not desired as MySQL is only used for storing configuration from Grafana and MySQL Proxy is
only used for HA MySQL.
